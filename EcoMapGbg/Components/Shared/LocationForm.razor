@using EcoMapGbg.Models.DTO
@using EcoMapGbg.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime
@inject EcoMapGbg.Services.ILocationService LocationService

<EditForm Model="newLocation" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText class="form-control" @bind-Value="newLocation.Name" />
    </div>

    <div class="mb-3">
        <label class="form-label">Address</label>
        <InputText class="form-control" @bind-Value="newLocation.Address" />
    </div>

    <div class="mb-3">
        <label class="form-label">Type</label>
        <InputSelect class="form-select" @bind-Value="newLocation.Type">
            <option value="">Select type</option>
            <option>SecondHand</option>
            <option>FreeShop</option>
            <option>RepairCafe</option>
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputTextArea class="form-control" @bind-Value="newLocation.Description" rows="3" />
    </div>

    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="newLocation.IsFree" />
        <label class="form-check-label">Free</label>
    </div>

    <button class="btn btn-success w-100" type="submit">ðŸ’¾ Add Place</button>
</EditForm>

@code {
    [Parameter] public EventCallback<Location> OnLocationAdded { get; set; }

    private CreateLocationRequest newLocation = new();

    private async Task HandleSubmit()
    {
        var location = await LocationService.CreateLocationAsync(newLocation);
        await OnLocationAdded.InvokeAsync(location);
        newLocation = new(); // Reset form
    }


}