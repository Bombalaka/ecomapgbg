@page "/places"
@using EcoMapGbg.Models.DTO
@inject ILocationService LocationService
@inject IJSRuntime JSRuntimes

<PageTitle>Places - Ecomapgbg</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-5">
    <h1 class="text-success">üó∫Ô∏è All Eco-Friendly Places</h1>
    <div class="d-flex align-items-center gap-3">
        <button class="btn btn-success" @onclick="ShowAddModal">
            ‚ûï Add New Place
        </button>
        <span class="badge bg-success fs-6">@locations.Count places</span>
    </div>
</div>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-success" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3 text-muted">Discovering eco places...</p>
    </div>
}
else if (locations.Any())
{
    <div class="row g-4">
        @foreach (var location in locations)
        {
            <div class="col-md-6 col-lg-4">
                <div class="card eco-card h-100">
                    <div class="card-header bg-light d-flex justify-content-between">
                        <span class="fs-2">@GetLocationIcon(location.Type)</span>
                        @if (location.IsFree)
                        {
                            <span class="badge bg-success">üÜì Free</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">üí∞ Paid</span>
                        }
                    </div>
                    <div class="card-body">
                        <h5 class="card-title text-success">@location.Name</h5>
                        <p class="card-text">
                            <small class="text-muted">üìç @location.Address</small>
                        </p>
                        <p class="card-text">
                            <span class="badge bg-light text-dark">@GetTypeDisplayName(location.Type)</span>
                        </p>
                        @if (!string.IsNullOrEmpty(location.Description))
                        {
                            <p class="card-text">
                                @(location.Description.Length > 100 ?
                                                    location.Description.Substring(0, 100) + "..." :
                                                    location.Description)
                </p>
                                }
                    </div>
                    <div class="card-footer bg-light">
                        <small class="text-muted">
                            ‚è∞ Added @FormatTimeAgo(location.CreatedAt)
                        </small>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="text-center py-5">
        <div class="display-1">üå±</div>
        <h3 class="text-muted mt-3">No eco places yet</h3>
        <p class="text-muted">Be the first to add an eco-friendly location!</p>
        <button class="btn btn-success" @onclick="ShowAddModal">
            ‚ûï Add Place
        </button>
    </div>
}

<!-- Modal HTML directly in this component -->
<div class="modal fade @(isModalVisible ? "show" : "")" style="display: @(isModalVisible ? "block" : "none")"
    tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header eco-gradient text-white">
                <h5 class="modal-title">
                    <span class="fs-4">üå±</span> Add New Eco Place
                </h5>
                <button type="button" class="btn-close btn-close-white" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="newLocation" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label fw-bold">üè™ Place Name *</label>
                            <InputText class="form-control" @bind-Value="newLocation.Name"
                                placeholder="e.g., Green Heart Caf√©" />
                            <ValidationMessage For="@(() => newLocation.Name)" class="text-danger" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label fw-bold">üìÇ Category *</label>
                            <InputSelect class="form-select" @bind-Value="newLocation.Type">
                                <option value="">Select category...</option>
                                <option value="SecondHand">üõçÔ∏è Second-hand Shop</option>
                                <option value="VeganCafe">üå± Vegan Caf√©</option>
                                <option value="RecyclingCenter">‚ôªÔ∏è Recycling Center</option>
                                <option value="RepairCafe">üîß Repair Caf√©</option>
                                <option value="Garden">‚òÄÔ∏è Community Garden</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => newLocation.Type)" class="text-danger" />
                        </div>

                        <div class="col-12">
                            <label class="form-label fw-bold">üìç Address *</label>
                            <InputText class="form-control" @bind-Value="newLocation.Address"
                                placeholder="e.g., Vasagatan 10, 41124 G√∂teborg" />
                            <ValidationMessage For="@(() => newLocation.Address)" class="text-danger" />
                        </div>

                        <div class="col-12">
                            <label class="form-label fw-bold">üìù Description</label>
                            <InputTextArea class="form-control" @bind-Value="newLocation.Description" rows="3"
                                placeholder="What makes this place special..." />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label fw-bold">üåê Latitude</label>
                            <InputNumber class="form-control" @bind-Value="newLocation.Latitude" placeholder="57.7089"
                                step="0.000001" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label fw-bold">üåê Longitude</label>
                            <InputNumber class="form-control" @bind-Value="newLocation.Longitude" placeholder="11.9746"
                                step="0.000001" />
                        </div>

                        <div class="col-12">
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" @bind-Value="newLocation.IsFree" />
                                <label class="form-check-label fw-bold">
                                    üÜì Free to use/visit
                                </label>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                <button type="button" class="btn btn-success" @onclick="HandleSubmit" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    üå± Add Eco Place
                </button>
            </div>
        </div>
    </div>
</div>

@if (isModalVisible)
{
    <div class="modal-backdrop fade show" @onclick="HideModal"></div>
}

@code {
    private List<Location> locations = new();
    private bool isLoading = true;
    private bool isModalVisible = false;
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    private CreateLocationRequest newLocation = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            locations = await LocationService.GetAllLocationsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading locations: {ex.Message}");
            locations = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowAddModal()
    {
        Console.WriteLine("Button clicked!");
        isModalVisible = true;
        newLocation = new CreateLocationRequest();
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private void HideModal()
    {
        isModalVisible = false;
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting) return;

        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;
            StateHasChanged();

            if (newLocation.Latitude == 0 || newLocation.Longitude == 0)
            {
                errorMessage = "Please provide coordinates (try: 57.7089, 11.9746)";
                return;
            }

            var location = await LocationService.CreateLocationAsync(newLocation);
            locations.Add(location);
            HideModal();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private string GetLocationIcon(string type) => type switch
    {
        "SecondHand" => "üõçÔ∏è",
        "VeganCafe" => "üå±",
        "RecyclingCenter" => "‚ôªÔ∏è",
        "RepairCafe" => "üîß",
        "Garden" => "‚òÄÔ∏è",
        "BikeWorkshop" => "üö≤",
        _ => "üìç"
    };

    private string GetTypeDisplayName(string type) => type switch
    {
        "SecondHand" => "Second-hand Shop",
        "VeganCafe" => "Vegan Caf√©",
        "RecyclingCenter" => "Recycling Center",
        "RepairCafe" => "Repair Caf√©",
        "Garden" => "Community Garden",
        "BikeWorkshop" => "Bike Workshop",
        _ => type
    };

    private string FormatTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        if (timeSpan.Days > 0)
            return $"{timeSpan.Days} days ago";
        else if (timeSpan.Hours > 0)
            return $"{timeSpan.Hours} hours ago";
        else if (timeSpan.Minutes > 0)
            return $"{timeSpan.Minutes} minutes ago";
        else
            return "Just now";
    }
}