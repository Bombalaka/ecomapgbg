@page "/places"
@inject ILocationService LocationService

<PageTitle>Places - Ecomapgbg</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="text-success">üó∫Ô∏è All Eco-Friendly Places</h1>
    <span class="badge bg-success fs-6">@locations.Count places</span>
</div>
<div>
    <button class="btn btn-success me-2 mb-3 mt-2" @onclick="ShowAddModal">
        ‚ûï Add New Place
    </button>
</div>



@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-success" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3 text-muted">Discovering eco places...</p>
    </div>
}
else if (locations.Any())
{
    <div class="row g-4">
        @foreach (var location in locations)
        {
            <div class="col-md-6 col-lg-4">
                <div class="card eco-card h-100">
                    <div class="card-header bg-light d-flex justify-content-between">
                        <span class="fs-2">@GetLocationIcon(location.Type)</span>
                        @if (location.IsFree)
                        {
                            <span class="badge bg-success">üÜì Free</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">üí∞ Paid</span>
                        }
                    </div>
                    <div class="card-body">
                        <h5 class="card-title text-success">@location.Name</h5>
                        <p class="card-text">
                            <small class="text-muted">üìç @location.Address</small>
                        </p>
                        <p class="card-text">
                            <span class="badge bg-light text-dark">@GetTypeDisplayName(location.Type)</span>
                        </p>
                        @if (!string.IsNullOrEmpty(location.Description))
                        {
                            <p class="card-text">
                                @(location.Description.Length > 100 ?
                                                    location.Description.Substring(0, 100) + "..." :
                                                    location.Description)
                </p>
                                }

                    </div>
                    <div class="card-footer bg-light">
                        <small class="text-muted">
                            ‚è∞ Added @FormatTimeAgo(location.CreatedAt)
                        </small>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="text-center py-5">
        <div class="display-1">üå±</div>
        <h3 class="text-muted mt-3">No eco places yet</h3>
        <p class="text-muted">Be the first to add an eco-friendly location!</p>
        <a href="/api/locations" class="btn btn-outline-primary">View API Data</a>
    </div>
}

@code {
    private List<Location> locations = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            locations = await LocationService.GetAllLocationsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading locations: {ex.Message}");
            locations = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetLocationIcon(string type) => type switch
    {
        "SecondHand" => "üõçÔ∏è",
        "VeganCafe" => "üå±",
        "RecyclingCenter" => "‚ôªÔ∏è",
        "RepairCafe" => "üîß",
        "Garden" => "‚òÄÔ∏è",
        "BikeWorkshop" => "üö≤",
        _ => "üìç"
    };

    private string GetTypeDisplayName(string type) => type switch
    {
        "SecondHand" => "Second-hand Shop",
        "VeganCafe" => "Vegan Caf√©",
        "RecyclingCenter" => "Recycling Center",
        "RepairCafe" => "Repair Caf√©",
        "Garden" => "Community Garden",
        "BikeWorkshop" => "Bike Workshop",
        _ => type
    };

    private string FormatTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        if (timeSpan.Days > 0)
            return $"{timeSpan.Days} days ago";
        else if (timeSpan.Hours > 0)
            return $"{timeSpan.Hours} hours ago";
        else if (timeSpan.Minutes > 0)
            return $"{timeSpan.Minutes} minutes ago";
        else
            return "Just now";
    }
    private AddLocationModal addLocationModal = default!;

    private void ShowAddModal()
    {
        addLocationModal.Show();
    }

    private async Task OnLocationAdded(Location newLocation)
    {
        locations.Add(newLocation);
        StateHasChanged();
    }
}