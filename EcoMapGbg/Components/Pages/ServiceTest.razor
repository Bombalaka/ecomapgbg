@page "/servicetest"
@using EcoMapGbg.Services
@using EcoMapGbg.Models
@using EcoMapGbg.Models.DTO
@inject ILocationService LocationService
@inject ILogger<ServiceTest> Logger

<h3>üß™ Service Test - Step by Step</h3>

<div class="row">
    <div class="col-12">
        <button class="btn btn-primary me-2" @onclick="TestGetLocations">
            üìã Test Get All Locations
        </button>
        <button class="btn btn-success me-2" @onclick="TestCreateLocation">
            ‚ûï Test Create Location
        </button>
        <button class="btn btn-info" @onclick="TestSearch">
            üîç Test Nearby Search
        </button>
    </div>
</div>

<div class="mt-4">
    @foreach (var log in logs)
    {
        <div class="alert @(log.IsError ? "alert-danger" : "alert-success")">
            <small class="text-muted">@log.Timestamp.ToString("HH:mm:ss")</small>
            <h6>@log.Title</h6>
            <pre>@log.Message</pre>
        </div>
    }
</div>

@code {
    private List<LogEntry> logs = new();

    private async Task TestGetLocations()
    {
        AddLog("üîç Testing GetAllLocationsAsync...", "Starting test");
        
        try
        {
            var locations = await LocationService.GetAllLocationsAsync();
            AddLog("‚úÖ GetAllLocationsAsync Success", 
                   $"Retrieved {locations.Count} locations\n" +
                   $"Locations: {string.Join(", ", locations.Select(l => l.Name))}");
        }
        catch (Exception ex)
        {
            AddLog("‚ùå GetAllLocationsAsync Failed", ex.ToString(), true);
        }
    }

    private async Task TestCreateLocation()
    {
        AddLog("üîç Testing CreateLocationAsync...", "Creating test location");
        
        try
        {
            var request = new CreateLocationRequest
            {
                Name = $"Test Location {DateTime.Now:HHmmss}",
                Address = "Test Address, G√∂teborg",
                Type = "SecondHand",
                Description = "Test description",
                Latitude = 57.7089,
                Longitude = 11.9746,
                IsFree = true
            };

            var created = await LocationService.CreateLocationAsync(request);
            AddLog("‚úÖ CreateLocationAsync Success", 
                   $"Created: {created.Name}\n" +
                   $"ID: {created.Id}\n" +
                   $"Created At: {created.CreatedAt}");
        }
        catch (Exception ex)
        {
            AddLog("‚ùå CreateLocationAsync Failed", ex.ToString(), true);
        }
    }

    private async Task TestSearch()
    {
        AddLog("üîç Testing SearchNearbyAsync...", "Searching near G√∂teborg center");
        
        try
        {
            var request = new NearbySearchRequest
            {
                Latitude = 57.7089,
                Longitude = 11.9746,
                RadiusKm = 10
            };

            var results = await LocationService.SearchNearbyAsync(request);
            AddLog("‚úÖ SearchNearbyAsync Success", 
                   $"Found {results.Count} locations\n" +
                   $"Results: {string.Join(", ", results.Select(r => $"{r.Name} ({r.DistanceKm:F1}km)"))}");
        }
        catch (Exception ex)
        {
            AddLog("‚ùå SearchNearbyAsync Failed", ex.ToString(), true);
        }
    }

    private void AddLog(string title, string message, bool isError = false)
    {
        logs.Insert(0, new LogEntry 
        { 
            Title = title, 
            Message = message, 
            IsError = isError,
            Timestamp = DateTime.Now 
        });
        StateHasChanged();
    }

    public class LogEntry
    {
        public string Title { get; set; } = "";
        public string Message { get; set; } = "";
        public bool IsError { get; set; }
        public DateTime Timestamp { get; set; }
    }
}